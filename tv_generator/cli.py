"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è TradingView OpenAPI Generator.
"""

import asyncio
from pathlib import Path
from typing import Optional, List
import typer
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Confirm
from loguru import logger

from .config import settings
from .core import Pipeline, PipelineError
from .api import TradingViewAPI, TradingViewAPIError

app = typer.Typer(
    name="tvgen",
    help="TradingView OpenAPI Generator - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä OpenAPI 3.1.0 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π",
    add_completion=True,
    rich_markup_mode="rich"
)
console = Console()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
__all__ = [
    "fetch_data",
    "health",
    "generate",
    "test_specs",
    "validate",
    "clean",
    "main",
    "fetch_data_async",
    "health_check_async"
]


def setup_logging(verbose: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level = "DEBUG" if verbose else settings.log_level
    
    logger.remove()
    logger.add(
        "logs/tvgen.log",
        level=level,
        format=settings.log_format,
        rotation="10 MB",
        retention="7 days"
    )
    logger.add(
        lambda msg: console.print(msg, end=""),
        level=level,
        format=settings.log_format
    )


@app.command()
def info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    table = Table(title="TradingView OpenAPI Generator Info")
    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
    
    table.add_row("–í–µ—Ä—Å–∏—è", "1.0.54")
    table.add_row("API URL", settings.tradingview_base_url)
    table.add_row("–¢–∞–π–º–∞—É—Ç", f"{settings.request_timeout}s")
    table.add_row("Retry", f"{settings.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    table.add_row("Rate Limit", f"{settings.requests_per_second} req/s")
    table.add_row("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", settings.results_dir)
    table.add_row("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", settings.specs_dir)
    
    console.print(table)
    
    markets_table = Table(title="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä—ã–Ω–∫–∏")
    markets_table.add_column("–†—ã–Ω–æ–∫", style="cyan")
    markets_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="green")
    markets_table.add_column("–≠–Ω–¥–ø–æ–∏–Ω—Ç", style="yellow")
    
    for market_name, config in settings.markets.items():
        markets_table.add_row(
            market_name,
            config['description'],
            config['endpoint']
        )
    
    console.print(markets_table)


@app.command()
def fetch_data(
    markets: Optional[List[str]] = typer.Option(
        None, 
        "--market", "-m", 
        help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä—ã–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: us_stocks,crypto_coins)"
    ),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"),
    force: bool = typer.Option(False, "--force", "-f", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö")
) -> None:
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å TradingView API."""
    setup_logging(verbose)
    
    async def _fetch_data() -> None:
        try:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å TradingView API...", total=None)
                
                pipeline = Pipeline()
                
                if markets:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤
                    for market in markets:
                        if market not in settings.markets:
                            console.print(f"[red]‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫: {market}[/red]")
                            raise typer.Exit(1)
                    
                    progress.update(task, description=f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(markets)} —Ä—ã–Ω–∫–æ–≤...")
                    
                    for market in markets:
                        market_config = settings.markets[market]
                        progress.update(task, description=f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–∫–∞: {market}")
                        
                        market_data = await pipeline.fetch_market_data(market, market_config)
                        pipeline.save_market_data(market_data)
                        
                        console.print(f"‚úÖ [green]–†—ã–Ω–æ–∫ {market} –æ–±—Ä–∞–±–æ—Ç–∞–Ω[/green]")
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤
                    progress.update(task, description="üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤...")
                    await pipeline.run()
                
                progress.update(task, description="‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            console.print(Panel.fit("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!", style="green"))
            
        except TradingViewAPIError as e:
            logger.error(f"API –æ—à–∏–±–∫–∞: {e}")
            console.print(f"[red]‚ùå API –æ—à–∏–±–∫–∞: {e}[/red]")
            raise typer.Exit(1)
        except PipelineError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}[/red]")
            raise typer.Exit(1)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
            raise typer.Exit(1)
    
    asyncio.run(_fetch_data())


@app.command()
def test_specs(
    verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π."""
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π...", total=None)
            
            # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from test_specifications import main as test_main
            test_main()
            
            progress.update(task, description="‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        console.print(Panel.fit("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", style="green"))
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}[/red]")
        raise typer.Exit(1)


@app.command()
def generate(
    output: Optional[str] = typer.Option(
        None, 
        "--output", "-o", 
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    ),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π."""
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π...", total=None)
            
            # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from generate_openapi import main as gen_main
            gen_main()
            
            progress.update(task, description="‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        console.print(Panel.fit("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", style="green"))
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}[/red]")
        raise typer.Exit(1)


@app.command()
def validate():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    console.print(Panel.fit("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", style="blue"))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    results_dir = Path(settings.results_dir)
    specs_dir = Path(settings.specs_dir)
    
    table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    table.add_column("–ü—Ä–æ–≤–µ—Ä–∫–∞", style="cyan")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
    table.add_column("–î–µ—Ç–∞–ª–∏", style="yellow")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if results_dir.exists():
        table.add_row("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "‚úÖ", str(results_dir))
    else:
        table.add_row("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "‚ö†Ô∏è", f"–°–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {results_dir}")
    
    if specs_dir.exists():
        table.add_row("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π", "‚úÖ", str(specs_dir))
    else:
        table.add_row("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π", "‚ö†Ô∏è", f"–°–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {specs_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–∫–æ–≤
    table.add_row("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä—ã–Ω–∫–æ–≤", "‚úÖ", f"{len(settings.markets)} —Ä—ã–Ω–∫–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–∞—Å—Ç—Ä–æ–µ–∫
    table.add_row("API URL", "‚úÖ", settings.tradingview_base_url)
    table.add_row("–¢–∞–π–º–∞—É—Ç", "‚úÖ", f"{settings.request_timeout}s")
    table.add_row("Rate Limit", "‚úÖ", f"{settings.requests_per_second} req/s")
    
    console.print(table)


@app.command()
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API –∏ —Å–∏—Å—Ç–µ–º—ã."""
    async def _health_check():
        try:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...", total=None)
                
                api = TradingViewAPI()
                async with api:
                    health_status = await api.health_check()
                
                pipeline = Pipeline()
                pipeline_health = await pipeline.health_check()
                
                progress.update(task, description="‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            table = Table(title="–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
            table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan")
            table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
            table.add_column("–î–µ—Ç–∞–ª–∏", style="yellow")
            
            table.add_row("API", health_status["status"], str(health_status["endpoints"]))
            table.add_row("Pipeline", pipeline_health["pipeline"], "")
            
            console.print(table)
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}[/red]")
            raise typer.Exit(1)
    
    asyncio.run(_health_check())


@app.command()
def clean(
    confirm: bool = typer.Option(False, "--yes", "-y", help="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞")
):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    results_dir = Path(settings.results_dir)
    specs_dir = Path(settings.specs_dir)
    logs_dir = Path("logs")
    
    files_to_remove = []
    
    if results_dir.exists():
        files_to_remove.extend(list(results_dir.glob("*")))
    
    if specs_dir.exists():
        files_to_remove.extend(list(specs_dir.glob("*.json")))
    
    if logs_dir.exists():
        files_to_remove.extend(list(logs_dir.glob("*.log")))
    
    if not files_to_remove:
        console.print("‚ú® –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        return
    
    console.print(f"üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(files_to_remove)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    for file in files_to_remove[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        console.print(f"  - {file}")
    
    if len(files_to_remove) > 10:
        console.print(f"  ... –∏ –µ—â–µ {len(files_to_remove) - 10} —Ñ–∞–π–ª–æ–≤")
    
    if not confirm:
        confirm = Confirm.ask("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?")
    
    if confirm:
        for file in files_to_remove:
            try:
                if file.is_file():
                    file.unlink()
                elif file.is_dir():
                    import shutil
                    shutil.rmtree(file)
            except Exception as e:
                console.print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file}: {e}")
        
        console.print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        console.print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    app()


async def fetch_data_async(markets=None, verbose=False, force=False):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è fetch_data –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    setup_logging(verbose)
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å TradingView API...", total=None)
            pipeline = Pipeline()
            if markets:
                for market in markets:
                    if market not in settings.markets:
                        console.print(f"[red]‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫: {market}[/red]")
                        raise typer.Exit(1)
                progress.update(task, description=f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(markets)} —Ä—ã–Ω–∫–æ–≤...")
                for market in markets:
                    market_config = settings.markets[market]
                    progress.update(task, description=f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–∫–∞: {market}")
                    market_data = await pipeline.fetch_market_data(market, market_config)
                    pipeline.save_market_data(market_data)
                    console.print(f"‚úÖ [green]–†—ã–Ω–æ–∫ {market} –æ–±—Ä–∞–±–æ—Ç–∞–Ω[/green]")
            else:
                progress.update(task, description="üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤...")
                await pipeline.run()
            progress.update(task, description="‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        console.print(Panel.fit("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!", style="green"))
    except TradingViewAPIError as e:
        logger.error(f"API –æ—à–∏–±–∫–∞: {e}")
        console.print(f"[red]‚ùå API –æ—à–∏–±–∫–∞: {e}[/red]")
        raise typer.Exit(1)
    except PipelineError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}[/red]")
        raise typer.Exit(1)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        raise typer.Exit(1)


async def health_check_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è health_check –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...", total=None)
            api = TradingViewAPI()
            async with api:
                health_status = await api.health_check()
            pipeline = Pipeline()
            pipeline_health = await pipeline.health_check()
            progress.update(task, description="‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        table = Table(title="–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
        table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
        table.add_column("–î–µ—Ç–∞–ª–∏", style="yellow")
        table.add_row("API", health_status["status"], str(health_status["endpoints"]))
        table.add_row("Pipeline", pipeline_health["pipeline"], "")
        console.print(table)
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}[/red]")
        raise typer.Exit(1)


if __name__ == "__main__":
    main() 