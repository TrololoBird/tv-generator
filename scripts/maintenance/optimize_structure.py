#!/usr/bin/env python3
"""
Project Structure Optimization Script
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import shutil
import json
import logging
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Set

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ProjectStructureOptimizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.optimizations = []
        
    def create_standard_structure(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        standard_dirs = [
            'src',
            'src/tv_generator',
            'scripts/utils',
            'scripts/maintenance',
            'docs/api',
            'docs/user_guide',
            'data/raw',
            'data/processed',
            'reports',
            'backups'
        ]
        
        for dir_path in standard_dirs:
            full_path = self.project_root / dir_path
            if not full_path.exists():
                full_path.mkdir(parents=True, exist_ok=True)
                self.optimizations.append(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
        
        # –°–æ–∑–¥–∞–µ–º __init__.py –≤ src/tv_generator
        init_file = self.project_root / 'src' / 'tv_generator' / '__init__.py'
        if not init_file.exists():
            init_file.touch()
            self.optimizations.append(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {init_file}")
    
    def move_main_package_to_src(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç –≤ src/"""
        logger.info("üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –≤ src/...")
        
        current_package = self.project_root / 'tv_generator'
        target_package = self.project_root / 'src' / 'tv_generator'
        
        if current_package.exists() and not target_package.exists():
            try:
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ __init__.py (–æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω)
                for item in current_package.iterdir():
                    if item.name != '__init__.py':
                        shutil.move(str(item), str(target_package / item.name))
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                shutil.rmtree(current_package)
                self.optimizations.append("–ü–µ—Ä–µ–º–µ—â–µ–Ω –ø–∞–∫–µ—Ç tv_generator –≤ src/")
                logger.info("–ü–µ—Ä–µ–º–µ—â–µ–Ω –ø–∞–∫–µ—Ç tv_generator –≤ src/")
            except OSError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç: {e}")
    
    def consolidate_scripts(self):
        """–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        logger.info("üîß –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤...")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
        script_categories = {
            'maintenance': ['cleanup.py', 'optimize_structure.py'],
            'utils': ['validation_and_ci.py', 'openapi_updater.py']
        }
        
        for category, scripts in script_categories.items():
            category_dir = self.project_root / 'scripts' / category
            category_dir.mkdir(exist_ok=True)
            
            for script in scripts:
                script_path = self.project_root / 'scripts' / script
                if script_path.exists():
                    try:
                        new_path = category_dir / script
                        shutil.move(str(script_path), str(new_path))
                        self.optimizations.append(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω —Å–∫—Ä–∏–ø—Ç {script} –≤ scripts/{category}/")
                        logger.info(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω —Å–∫—Ä–∏–ø—Ç {script} –≤ scripts/{category}/")
                    except OSError as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å {script}: {e}")
    
    def organize_documentation(self):
        """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
        logger.info("üìö –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ docs/
        specs_dir = self.project_root / 'specs'
        docs_specs_dir = self.project_root / 'docs' / 'specs'
        
        if specs_dir.exists() and not docs_specs_dir.exists():
            try:
                shutil.move(str(specs_dir), str(docs_specs_dir))
                self.optimizations.append("–ü–µ—Ä–µ–º–µ—â–µ–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ docs/specs/")
                logger.info("–ü–µ—Ä–µ–º–µ—â–µ–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ docs/specs/")
            except OSError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π README –≤ docs/
        docs_readme = self.project_root / 'docs' / 'README.md'
        if not docs_readme.exists():
            docs_content = """# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

- `api/` - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API
- `user_guide/` - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- `specs/` - OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
- `README.md` - –≠—Ç–æ—Ç —Ñ–∞–π–ª

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞: `pip install -e .`
2. –ó–∞–ø—É—Å–∫: `python -m tv_generator`
3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: `python scripts/maintenance/generate_specs.py`

## –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

–°–º. —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.
"""
            docs_readme.write_text(docs_content, encoding='utf-8')
            self.optimizations.append("–°–æ–∑–¥–∞–Ω README –≤ docs/")
    
    def organize_data_and_results(self):
        """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        logger.info("üìä –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ data/processed/
        results_dir = self.project_root / 'results'
        data_processed_dir = self.project_root / 'data' / 'processed'
        
        if results_dir.exists() and not data_processed_dir.exists():
            try:
                shutil.move(str(results_dir), str(data_processed_dir))
                self.optimizations.append("–ü–µ—Ä–µ–º–µ—â–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ data/processed/")
                logger.info("–ü–µ—Ä–µ–º–µ—â–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ data/processed/")
            except OSError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ª–æ–≥–∏ –≤ reports/
        logs_dir = self.project_root / 'logs'
        reports_dir = self.project_root / 'reports'
        
        if logs_dir.exists():
            try:
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ logs –≤ reports
                for log_file in logs_dir.iterdir():
                    if log_file.is_file():
                        shutil.move(str(log_file), str(reports_dir / log_file.name))
                
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs
                shutil.rmtree(logs_dir)
                self.optimizations.append("–ü–µ—Ä–µ–º–µ—â–µ–Ω—ã –ª–æ–≥–∏ –≤ reports/")
                logger.info("–ü–µ—Ä–µ–º–µ—â–µ–Ω—ã –ª–æ–≥–∏ –≤ reports/")
            except OSError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ª–æ–≥–∏: {e}")
    
    def create_entry_points(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞"""
        logger.info("üö™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π CLI
        main_cli = self.project_root / 'main.py'
        if not main_cli.exists():
            cli_content = """#!/usr/bin/env python3
\"\"\"
TradingView OpenAPI Generator - Main Entry Point
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
\"\"\"

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent / 'src'
sys.path.insert(0, str(src_path))

from tv_generator.cli import main

if __name__ == "__main__":
    main()
"""
            main_cli.write_text(cli_content, encoding='utf-8')
            self.optimizations.append("–°–æ–∑–¥–∞–Ω –≥–ª–∞–≤–Ω—ã–π CLI: main.py")
            logger.info("–°–æ–∑–¥–∞–Ω –≥–ª–∞–≤–Ω—ã–π CLI: main.py")
        
        # –°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
        generate_script = self.project_root / 'scripts' / 'maintenance' / 'generate_specs.py'
        if not generate_script.exists():
            generate_content = """#!/usr/bin/env python3
\"\"\"
Script for generating OpenAPI specifications
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
\"\"\"

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent.parent / 'src'
sys.path.insert(0, str(src_path))

from tv_generator.core import generate_all_specifications

def main():
    \"\"\"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏\"\"\"
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π...")
    
    try:
        generate_all_specifications()
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
"""
            generate_script.write_text(generate_content, encoding='utf-8')
            self.optimizations.append("–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: scripts/maintenance/generate_specs.py")
            logger.info("–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: scripts/maintenance/generate_specs.py")
    
    def update_pyproject_toml(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç pyproject.toml –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        logger.info("‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pyproject.toml...")
        
        pyproject_path = self.project_root / 'pyproject.toml'
        if pyproject_path.exists():
            try:
                content = pyproject_path.read_text(encoding='utf-8')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                content = content.replace(
                    'packages = ["tv_generator"]',
                    'packages = ["src/tv_generator"]'
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º entry points
                if 'tvgen = "tv_generator.cli:main"' in content:
                    content = content.replace(
                        'tvgen = "tv_generator.cli:main"',
                        'tvgen = "src.tv_generator.cli:main"'
                    )
                
                if 'tvgen-simple = "tv_generator.simple_cli:main"' in content:
                    content = content.replace(
                        'tvgen-simple = "tv_generator.simple_cli:main"',
                        'tvgen-simple = "src.tv_generator.simple_cli:main"'
                    )
                
                pyproject_path.write_text(content, encoding='utf-8')
                self.optimizations.append("–û–±–Ω–æ–≤–ª–µ–Ω pyproject.toml –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
                logger.info("–û–±–Ω–æ–≤–ª–µ–Ω pyproject.toml –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pyproject.toml: {e}")
    
    def create_standard_configs(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
        
        # .env.example
        env_example = self.project_root / '.env.example'
        if not env_example.exists():
            env_content = """# TradingView OpenAPI Generator Configuration
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π

# API Configuration
API_BASE_URL=https://scanner.tradingview.com
API_TIMEOUT=30

# Generation Settings
DEFAULT_MARKET=us_stocks
OUTPUT_FORMAT=json
VALIDATE_SPECS=true

# Logging
LOG_LEVEL=INFO
LOG_FILE=reports/generator.log

# Development
DEBUG=false
TEST_MODE=false
"""
            env_example.write_text(env_content, encoding='utf-8')
            self.optimizations.append("–°–æ–∑–¥–∞–Ω .env.example")
        
        # setup.cfg –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        setup_cfg = self.project_root / 'setup.cfg'
        if not setup_cfg.exists():
            setup_content = """[flake8]
max-line-length = 88
extend-ignore = E203, W503
exclude = .venv,.venv_new,__pycache__,.git,.mypy_cache,.pytest_cache

[mypy]
python_version = 3.12
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True

[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -v --tb=short
"""
            setup_cfg.write_text(setup_content, encoding='utf-8')
            self.optimizations.append("–°–æ–∑–¥–∞–Ω setup.cfg")
    
    def generate_structure_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        report = []
        report.append("# PROJECT_STRUCTURE_OPTIMIZATION_REPORT.md")
        report.append("")
        report.append(f"## –û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")
        report.append(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"**–ü—Ä–æ–µ–∫—Ç:** {self.project_root.name}")
        report.append("")
        
        report.append("## üèóÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        report.append("")
        
        for optimization in self.optimizations:
            report.append(f"- ‚úÖ {optimization}")
        report.append("")
        
        report.append("## üìÅ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        report.append("")
        report.append("```")
        report.append("tv-generator/")
        report.append("‚îú‚îÄ‚îÄ src/")
        report.append("‚îÇ   ‚îî‚îÄ‚îÄ tv_generator/          # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç")
        report.append("‚îÇ       ‚îú‚îÄ‚îÄ __init__.py")
        report.append("‚îÇ       ‚îú‚îÄ‚îÄ api.py")
        report.append("‚îÇ       ‚îú‚îÄ‚îÄ cli.py")
        report.append("‚îÇ       ‚îú‚îÄ‚îÄ config.py")
        report.append("‚îÇ       ‚îú‚îÄ‚îÄ core.py")
        report.append("‚îÇ       ‚îî‚îÄ‚îÄ simple_cli.py")
        report.append("‚îú‚îÄ‚îÄ scripts/")
        report.append("‚îÇ   ‚îú‚îÄ‚îÄ maintenance/           # –°–∫—Ä–∏–ø—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
        report.append("‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cleanup.py")
        report.append("‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ optimize_structure.py")
        report.append("‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ generate_specs.py")
        report.append("‚îÇ   ‚îî‚îÄ‚îÄ utils/                 # –£—Ç–∏–ª–∏—Ç—ã")
        report.append("‚îÇ       ‚îú‚îÄ‚îÄ validation_and_ci.py")
        report.append("‚îÇ       ‚îî‚îÄ‚îÄ openapi_updater.py")
        report.append("‚îú‚îÄ‚îÄ tests/                     # –¢–µ—Å—Ç—ã")
        report.append("‚îú‚îÄ‚îÄ docs/")
        report.append("‚îÇ   ‚îú‚îÄ‚îÄ api/                   # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API")
        report.append("‚îÇ   ‚îú‚îÄ‚îÄ user_guide/            # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        report.append("‚îÇ   ‚îú‚îÄ‚îÄ specs/                 # OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        report.append("‚îÇ   ‚îî‚îÄ‚îÄ README.md")
        report.append("‚îú‚îÄ‚îÄ data/")
        report.append("‚îÇ   ‚îú‚îÄ‚îÄ raw/                   # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
        report.append("‚îÇ   ‚îî‚îÄ‚îÄ processed/             # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        report.append("‚îú‚îÄ‚îÄ reports/                   # –û—Ç—á–µ—Ç—ã –∏ –ª–æ–≥–∏")
        report.append("‚îú‚îÄ‚îÄ backups/                   # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
        report.append("‚îú‚îÄ‚îÄ main.py                    # –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞")
        report.append("‚îú‚îÄ‚îÄ pyproject.toml")
        report.append("‚îú‚îÄ‚îÄ requirements.txt")
        report.append("‚îú‚îÄ‚îÄ requirements-dev.txt")
        report.append("‚îú‚îÄ‚îÄ README.md")
        report.append("‚îî‚îÄ‚îÄ .env.example")
        report.append("```")
        report.append("")
        
        report.append("## üöÄ –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞")
        report.append("")
        report.append("### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        report.append("- `python main.py` - –ì–ª–∞–≤–Ω—ã–π CLI")
        report.append("- `python scripts/maintenance/generate_specs.py` - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π")
        report.append("- `python scripts/maintenance/cleanup.py` - –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        report.append("")
        
        report.append("### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:")
        report.append("- `pip install -e .` - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        report.append("- `pytest` - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
        report.append("- `black .` - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
        report.append("- `flake8` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è")
        report.append("")
        
        report.append("## üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏")
        report.append("")
        report.append("1. **–û–±–Ω–æ–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã** –≤ –∫–æ–¥–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        report.append("2. **–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç—ã** –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
        report.append("3. **–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é** —Å –Ω–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏")
        report.append("4. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å** –≤—Å–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞")
        report.append("5. **–û–±–Ω–æ–≤–∏—Ç—å CI/CD** –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        report.append("")
        
        return "\n".join(report)
    
    def run_optimization(self) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.create_standard_structure()
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        self.move_main_package_to_src()
        
        # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
        self.consolidate_scripts()
        
        # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.organize_documentation()
        
        # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.organize_data_and_results()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
        self.create_entry_points()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.update_pyproject_toml()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        self.create_standard_configs()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = self.generate_structure_report()
        
        logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(self.optimizations)} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = Path.cwd()
    
    print("üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    print()
    
    optimizer = ProjectStructureOptimizer(project_root)
    report = optimizer.run_optimization()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = project_root / "PROJECT_STRUCTURE_OPTIMIZATION_REPORT.md"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    print()
    print(report)

if __name__ == "__main__":
    main() 