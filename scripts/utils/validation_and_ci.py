#!/usr/bin/env python3
"""
Validation and CI/CD System for OpenAPI Specifications
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
"""

import json
import logging
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

logger = logging.getLogger(__name__)


class OpenAPIValidator:
    """–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π"""

    def __init__(self):
        self.specs_dir = Path("docs/specs")
        self.results_dir = Path("results")
        self.validation_results = {}

    def validate_specification(self, spec_path: Path) -> dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        try:
            with open(spec_path, encoding="utf-8") as f:
                spec = json.load(f)

            validation_result = {
                "valid": True,
                "errors": [],
                "warnings": [],
                "file": str(spec_path),
                "timestamp": datetime.now().isoformat(),
            }

            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            required_fields = ["openapi", "info", "paths"]
            for field in required_fields:
                if field not in spec:
                    validation_result["valid"] = False
                    validation_result["errors"].append(f"Missing required field: {field}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ OpenAPI
            if spec.get("openapi") != "3.1.0":
                validation_result["warnings"].append("OpenAPI version should be 3.1.0")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—É—Ç–µ–π
            if not spec.get("paths"):
                validation_result["warnings"].append("No paths defined")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ undocumented –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self._check_undocumented_parameters(spec, validation_result)

            return validation_result

        except Exception as e:
            return {
                "valid": False,
                "errors": [f"Failed to parse: {e}"],
                "warnings": [],
                "file": str(spec_path),
                "timestamp": datetime.now().isoformat(),
            }

    def _check_undocumented_parameters(self, spec: dict[str, Any], result: dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç undocumented –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        undocumented_found = False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø—É—Ç—è—Ö
        for path, path_item in spec.get("paths", {}).items():
            for method, operation in path_item.items():
                if method.lower() == "post" and "requestBody" in operation:
                    schema = operation["requestBody"].get("content", {}).get("application/json", {}).get("schema", {})
                    if self._has_undocumented_params(schema):
                        undocumented_found = True
                        result["warnings"].append(f"Undocumented parameters found in {path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        for schema_name, schema in spec.get("components", {}).get("schemas", {}).items():
            if schema.get("x-undocumented") or schema.get("x-experimental"):
                undocumented_found = True
                result["warnings"].append(f"Undocumented schema found: {schema_name}")

        if undocumented_found:
            result["warnings"].append("Undocumented parameters detected - use with caution")

    def _has_undocumented_params(self, schema: dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ undocumented –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Ö–µ–º–µ"""
        if schema.get("x-undocumented") or schema.get("x-experimental"):
            return True

        for prop_name, prop_schema in schema.get("properties", {}).items():
            if prop_schema.get("x-undocumented") or prop_schema.get("x-experimental"):
                return True
            if isinstance(prop_schema, dict) and self._has_undocumented_params(prop_schema):
                return True

        return False

    def validate_all_specifications(self) -> dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        logger.info("–ù–∞—á–∏–Ω–∞—é –≤–∞–ª–∏–¥–∞—Ü–∏—é OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π")

        validation_results = {}

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
        for spec_file in self.specs_dir.glob("*_openapi.json"):
            logger.info(f"üîç –í–∞–ª–∏–¥–∏—Ä—É—é: {spec_file.name}")
            result = self.validate_specification(spec_file)
            validation_results[spec_file.name] = result

            if result["valid"]:
                logger.info(f"‚úÖ {spec_file.name} - –≤–∞–ª–∏–¥–Ω–∞")
            else:
                logger.warning(f"‚ö†Ô∏è {spec_file.name} - –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        validation_report_path = self.results_dir / "validation_report.json"
        with open(validation_report_path, "w", encoding="utf-8") as f:
            json.dump(validation_results, f, indent=2, ensure_ascii=False)

        logger.info(f"üìã –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {validation_report_path}")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_specs = len(validation_results)
        valid_specs = sum(1 for result in validation_results.values() if result["valid"])
        total_errors = sum(len(result["errors"]) for result in validation_results.values())
        total_warnings = sum(len(result["warnings"]) for result in validation_results.values())

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        logger.info(f"   –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {total_specs}")
        logger.info(f"   –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_specs}")
        logger.info(f"   –û—à–∏–±–æ–∫: {total_errors}")
        logger.info(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")

        return validation_results


class CICDPipeline:
    """CI/CD –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""

    def __init__(self):
        self.repo_path = Path(".")
        self.specs_dir = Path("specs")
        self.results_dir = Path("results")

    def run_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest
            result = subprocess.run(
                [sys.executable, "-m", "pytest", "tests/", "-v", "--tb=short"],
                capture_output=True,
                text=True,
                cwd=self.repo_path,
            )

            if result.returncode == 0:
                logger.info("–¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏: {result.stderr}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
            return False

    def validate_specifications(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π...")

        try:
            validator = OpenAPIValidator()
            results = validator.validate_all_specifications()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã
            all_valid = all(result["valid"] for result in results.values())

            if all_valid:
                logger.info("–í—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã")
                return True
            else:
                logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="Validation and CI/CD for OpenAPI specs")
    parser.add_argument("--validate", action="store_true", help="Validate specifications")
    parser.add_argument("--test", action="store_true", help="Run tests")
    parser.add_argument("--cicd", action="store_true", help="Run CI/CD pipeline")

    args = parser.parse_args()

    if args.validate:
        validator = OpenAPIValidator()
        validator.validate_all_specifications()

    elif args.test:
        cicd = CICDPipeline()
        cicd.run_tests()

    elif args.cicd:
        cicd = CICDPipeline()
        cicd.validate_specifications()
        cicd.run_tests()

    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        validator = OpenAPIValidator()
        validator.validate_all_specifications()


if __name__ == "__main__":
    main()
