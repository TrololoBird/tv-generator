name: docker-build

on:
  push:
    branches: [main]
    tags: ["v*"]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    env:
      GHCR_REGISTRY: ghcr.io
      IMAGE_NAME: tvgen

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lint YAML
        uses: github/super-linter@v5
        with:
          languages: YAML
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install types-requests types-PyYAML types-toml
          pip install -e .
          pytest -q

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ toLower(github.repository_owner) }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.GHCR_REGISTRY }}/${{ toLower(github.repository_owner) }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
            ${{ env.GHCR_REGISTRY }}/${{ toLower(github.repository_owner) }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.GHCR_REGISTRY }}/${{ toLower(github.repository_owner) }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=inline
          provenance: false

      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: '{"text":"Build failed for ${{ github.repository }}!"}'
