---
# yamllint disable rule:truthy rule:line-length
name: Update Specs

on:
  workflow_dispatch: {}  # yamllint disable-line rule:truthy
  schedule:
    - cron: '0 3 * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    env:
      SERVER_URL: ${{ secrets.SERVER_URL }}
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Actionlint
        uses: rhysd/actionlint@v1.7.7
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          # Install project along with required extras
          poetry install --no-interaction
          poetry run pip install requests_mock yamllint openapi-spec-validator \
            types-requests types-PyYAML types-toml
      - name: Debug PATH
        run: echo $PATH
      - name: Validate tvgen Installation
        run: |
          poetry run tvgen --version || echo "tvgen installation failed"
      - name: Export server URL
        if: env.SERVER_URL != ''
        run: echo "SERVER_URL=${SERVER_URL}" >> "$GITHUB_ENV"

      - name: Build specs
        run: |
          extra=""
          if [ -n "$SERVER_URL" ]; then
            extra="--server-url $SERVER_URL"
          fi
          poetry run tvgen build --indir results --outdir specs $extra
      - name: Validate all generated specs
        run: |
          for spec in specs/*.yaml; do
            yamllint "$spec"
            openapi-spec-validator "$spec"
          done
      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: results
          path: results/**
      - name: Stash changes (if any)
        run: |
          git stash --include-untracked

      - name: Apply stashed changes
        run: |
          git stash pop || echo "No stashed changes to apply"

      - name: Pull latest changes from remote
        run: |
          git fetch origin main
          git merge origin/main

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          add: |
            specs/*.yaml
            results/**
          message: 'chore: update generated specifications'
          default_author: github_actions

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: 'chore: update generated specifications'
          title: 'Update OpenAPI specifications'
          body: 'Automated update of generated specifications.'
          branch: 'OpenAPI'
          token: ${{ secrets.GITHUB_TOKEN }}
          # - name: Notify on failure
          #   if: failure()
          #   uses: Ilshidur/action-slack@2.1.0
          #   with:
          #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          #     msg: 'Workflow failed: ${{ github.workflow }} in ${{ github.repository }}'

  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-interaction --no-root
          poetry run pip install pytest-cov

      - name: Ruff (lint/fix check)
        run: poetry run ruff check .

      - name: Black (format check)
        run: poetry run black --check .

      - name: Pytest with coverage
        run: poetry run pytest --cov=src --cov-report=xml -q

      - name: Upload coverage to Codecov
        if: ${{ env.CODECOV_TOKEN != '' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          pip install codecov
          codecov -t $CODECOV_TOKEN
