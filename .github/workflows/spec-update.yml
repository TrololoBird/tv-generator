---
# yamllint disable rule:truthy rule:line-length
name: Update Specs

on:
  push:
    branches: [main]
  workflow_dispatch: {}
  schedule:
    - cron: '0 3 * * *'

permissions:
  contents: read
  pull-requests: read

jobs:
  generate:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    env:
      SERVER_URL: ${{ secrets.SERVER_URL }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-interaction --no-root
          poetry run pip install requests_mock yamllint openapi-spec-validator safety pip-audit

      - name: Show versions
        run: |
          python --version
          poetry --version
          poetry run tvgen --version

      - name: Refresh and generate specs
        run: |
          set -euo pipefail
          poetry run tvgen refresh --market all
          poetry run tvgen generate --market all
          poetry run tvgen validate

      - name: Build specs
        run: |
          set -euo pipefail
          extra=""
          if [ -n "${SERVER_URL}" ]; then
            extra="--server-url ${SERVER_URL}"
          fi
          poetry run tvgen build --indir results --outdir specs ${extra}

      - name: Bundle specs
        run: poetry run tvgen bundle --format yaml --outfile bundle.yaml

      - name: Validate specs
        run: |
          for spec in specs/*.yaml; do
            yamllint "$spec"
            openapi-spec-validator "$spec"
          done

      - name: Security audit
        run: |
          poetry run safety check -r requirements.txt -r requirements-dev.txt
          poetry run pip-audit

      - name: Check lock file
        run: poetry lock --check

      - name: Update README
        run: poetry run tvgen docs > README.md

      - name: Upload artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: specs-${{ matrix.python-version }}
          path: |
            specs/*.yaml
            bundle.yaml
          if-no-files-found: error

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: 'chore: update generated specifications'
          title: 'Update OpenAPI specifications'
          body: 'Automated update of generated specifications.'
          branch: openapi-specs-${{ github.run_number }}
          token: ${{ secrets.GITHUB_TOKEN }}

  quality:
    needs: generate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-interaction --no-root
          poetry run pip install pytest-cov ruff black mypy

      - name: Ruff
        run: poetry run ruff check .

      - name: Black
        run: poetry run black --check .

      - name: MyPy
        run: poetry run mypy src

      - name: Pytest with coverage
        run: poetry run pytest --cov=src --cov-report=xml -q

      - name: Upload coverage to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: ${{ env.CODECOV_TOKEN != '' }}
        run: |
          pip install codecov
          codecov -t "$CODECOV_TOKEN"
