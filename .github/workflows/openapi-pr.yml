name: OpenAPI Spec Automation

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      SERVER_URL: ${{ secrets.SERVER_URL }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install yamllint openapi-spec-validator requests_mock
      - name: Fetch data and generate specs
        run: |
          tvgen fetch-data || echo "fetch-data failed"
          tvgen generate || echo "generate failed"
          tvgen validate || echo "validate failed"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi-specs
          path: |
            specs/*.json
            results/**
          if-no-files-found: ignore
      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          add: |
            specs/*.json
            results/**
          message: 'chore: update generated specifications'
          default_author: github_actions
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: 'chore: update generated specifications'
          title: 'Update OpenAPI specifications'
          body: 'Automated update of generated specifications.'
          branch: 'OpenAPI'
          base: 'main'
          token: ${{ secrets.GITHUB_TOKEN }}

  quality:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-cov ruff flake8 mypy
      - name: Ruff
        run: ruff check src/ tests/
      - name: Flake8
        run: flake8 src/ tests/
      - name: Black
        run: black --check src/ tests/
      - name: Mypy (non-blocking)
        run: |
          mypy src/tv_generator || true
      - name: Pytest
        run: pytest --cov=src/tv_generator --cov-report=xml -q
      - name: Upload coverage
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          pip install codecov
          codecov -t "$CODECOV_TOKEN"
