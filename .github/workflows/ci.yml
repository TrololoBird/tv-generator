name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * 1'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Format check
        run: black --check .
      
      - name: Lint
        run: flake8 tv_generator tests
      
      - name: Type check
        run: mypy tv_generator/
      
      - name: Security - Bandit
        run: bandit -r tv_generator
      
      - name: Security - Safety
        run: safety check
      
      - name: Test with coverage
        run: |
          pytest --cov=tv_generator --cov-report=xml --cov-report=term-missing
        timeout-minutes: 10
Looking at the context, I can see the issue. The `if` condition is missing the `${{ }}` wrapper around `secrets.CODECOV_TOKEN`. Here's the fix:
          codecov -t $CODECOV_TOKEN

  integration:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Test CLI commands
        run: |
          tvgen --help
          tvgen info
          tvgen validate
      
      - name: Test data fetching (mock)
        run: |
          # Тестируем с моками для избежания сетевых запросов
          python -c "
          import asyncio
          from unittest.mock import patch
          from tv_generator.core import Pipeline
          
          async def test_pipeline():
              with patch('tv_generator.api.TradingViewAPI'):
                  pipeline = Pipeline()
                  # Тест без реальных API вызовов
                  print('Pipeline test completed')
          
          asyncio.run(test_pipeline())
          "

  build:
    runs-on: ubuntu-latest
    needs: [test, integration]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -e .
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Publish to PyPI
        if: ${{ secrets.PYPI_TOKEN }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*
