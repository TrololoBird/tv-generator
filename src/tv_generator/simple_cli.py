#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π CLI –¥–ª—è TradingView OpenAPI Generator –±–µ–∑ Typer.
"""

import asyncio
import sys
import argparse
from pathlib import Path
from typing import List, Optional
import json

from .core import Pipeline
from .api import TradingViewAPI
from .config import settings


def setup_logging(verbose: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    from loguru import logger
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.remove()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    log_level = "DEBUG" if verbose else "INFO"
    logger.add(
        sys.stderr,
        format=settings.log_format,
        level=log_level,
        colorize=True
    )
    
    return logger


def info() -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ."""
    print("üöÄ TradingView OpenAPI Generator")
    print("=" * 50)
    print(f"Python: {sys.version}")
    print(f"API URL: {settings.tradingview_base_url}")
    print(f"–¢–∞–π–º–∞—É—Ç: {settings.request_timeout}s")
    print(f"Rate Limit: {settings.requests_per_second} req/s")
    print()
    
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—ã–Ω–∫–∏:")
    for name, config in settings.markets.items():
        print(f"  ‚Ä¢ {name}: {config['description']} ({config['endpoint']})")
    print()
    
    print("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {settings.results_dir}")
    print(f"  ‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {settings.specs_dir}")
    print()
    
    print("üîß –ö–æ–º–∞–Ω–¥—ã:")
    print("  ‚Ä¢ info - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    print("  ‚Ä¢ fetch-data - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å TradingView")
    print("  ‚Ä¢ test-specs - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("  ‚Ä¢ generate - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("  ‚Ä¢ health - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã")


async def fetch_data(markets: Optional[List[str]] = None, verbose: bool = False) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å TradingView."""
    logger = setup_logging(verbose)
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å TradingView")
        
        pipeline = Pipeline()
        await pipeline.run()
        
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)


async def test_specs(verbose: bool = False) -> None:
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    logger = setup_logging(verbose)

    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π")

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è
        specs_dir = Path(settings.specs_dir)
        if not specs_dir.exists():
            logger.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        spec_files = list(specs_dir.glob("*.json"))
        if not spec_files:
            logger.warning("‚ö†Ô∏è –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(spec_files)} —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π")

        for spec_file in spec_files:
            try:
                with open(spec_file, 'r', encoding='utf-8') as f:
                    spec_data = json.load(f)
                
                # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if "openapi" not in spec_data:
                    logger.error(f"‚ùå {spec_file.name}: –ù–µ —è–≤–ª—è–µ—Ç—Å—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
                    continue
                
                if "paths" not in spec_data:
                    logger.error(f"‚ùå {spec_file.name}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—É—Ç–∏ (paths)")
                    continue
                
                if "info" not in spec_data:
                    logger.error(f"‚ùå {spec_file.name}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (info)")
                    continue
                
                logger.info(f"‚úÖ {spec_file.name}: –í–∞–ª–∏–¥–Ω–∞")
                
            except json.JSONDecodeError:
                logger.error(f"‚ùå {spec_file.name}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
            except Exception as e:
                logger.error(f"‚ùå {spec_file.name}: –û—à–∏–±–∫–∞ - {e}")

        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


async def generate(output: Optional[str] = None, verbose: bool = False) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    logger = setup_logging(verbose)
    
    try:
        logger.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π")
        
        # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from generate_openapi import main as gen_main
        gen_main()
        
        logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)


async def health(verbose: bool = False) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã."""
    logger = setup_logging(verbose)
    
    try:
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
        
        api = TradingViewAPI()
        async with api:
            health_status = await api.health_check()
        
        pipeline = Pipeline()
        pipeline_health = await pipeline.health_check()
        
        print("üìä –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  ‚Ä¢ API: {health_status['status']}")
        print(f"  ‚Ä¢ Pipeline: {pipeline_health['pipeline']}")
        
        if health_status['endpoints']:
            print("  ‚Ä¢ –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
            for endpoint, status in health_status['endpoints'].items():
                print(
                    f"    - {endpoint}: {status}"
                )
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        sys.exit(1)


def validate() -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    results_dir = Path(settings.results_dir)
    specs_dir = Path(settings.specs_dir)
    
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    if results_dir.exists():
        print(f"  ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_dir}")
    else:
        print(
            f"  ‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_dir} (—Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
        )
    
    if specs_dir.exists():
        print(f"  ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {specs_dir}")
    else:
        print(
            f"  ‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {specs_dir} (—Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
        )
    
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print(
        f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä—ã–Ω–∫–æ–≤: {len(settings.markets)} —Ä—ã–Ω–∫–æ–≤"
    )
    print(f"  ‚úÖ API URL: {settings.tradingview_base_url}")
    print(f"  ‚úÖ –¢–∞–π–º–∞—É—Ç: {settings.request_timeout}s")
    print(f"  ‚úÖ Rate Limit: {settings.requests_per_second} req/s")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description=(
            "TradingView OpenAPI Generator - "
            "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä OpenAPI 3.1.0 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π"
        )
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ info
    subparsers.add_parser("info", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ")
    
    # –ö–æ–º–∞–Ω–¥–∞ fetch-data
    fetch_parser = subparsers.add_parser("fetch-data", help="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å TradingView")
    fetch_parser.add_argument(
        "--markets",
        nargs="+",
        help=(
            "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä—ã–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ test-specs
    subparsers.add_parser("test-specs", help="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    # –ö–æ–º–∞–Ω–¥–∞ generate
    generate_parser = subparsers.add_parser("generate", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    generate_parser.add_argument(
        "--output", "-o",
        help=(
            "–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        )
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ health
    subparsers.add_parser("health", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ validate
    subparsers.add_parser("validate", help="–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    if args.command == "info":
        info()
    elif args.command == "fetch-data":
        asyncio.run(fetch_data(args.markets, args.verbose))
    elif args.command == "test-specs":
        asyncio.run(test_specs(args.verbose))
    elif args.command == "generate":
        asyncio.run(generate(args.output, args.verbose))
    elif args.command == "health":
        asyncio.run(health(args.verbose))
    elif args.command == "validate":
        validate()


if __name__ == "__main__":
    main()
