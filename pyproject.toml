[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tv-generator"
version = "2.0.0"
description = "TradingView OpenAPI Generator - автоматизированный генератор OpenAPI 3.1.0 спецификаций"
authors = [
    {name = "TradingView OpenAPI Generator Team", email = "support@tradingview.com"}
]
maintainers = [
    {name = "TradingView OpenAPI Generator Team", email = "support@tradingview.com"}
]
keywords = ["tradingview", "openapi", "api", "generator", "trading", "finance"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business :: Financial :: Investment",
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
dependencies = [
    "httpx>=0.27.0",
    "pydantic>=2.11.2",
    "pydantic-settings>=2.2.1",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "pyyaml>=6.0.1",
    "openapi-spec-validator>=0.7.2",
    "jsonschema>=4.21.0",
    "requests>=2.31.0",
    "toml>=0.10.2",
]

[project.optional-dependencies]
dev = [
    "pytest==8.0.0",
    "pytest-cov==4.1.0",
    "pytest-asyncio==0.23.5",
    "black==24.2.0",
    "flake8==7.0.0",
    "mypy==1.8.0",
    "coverage==7.4.1",
    "bandit==1.7.7",
    "safety==2.3.5",
    "requests-mock==1.11.0",
    "types-requests==2.31.0.20240311",
    "types-toml==0.10.8.7",
]

[project.scripts]
tvgen = "tv_generator.cli:main"
tvgen-simple = "tv_generator.simple_cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.mypy]
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/tv_generator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src/tv_generator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".mypy_cache",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]
